{
  "args": {},
  "componentId": "components-inputmask-card-number",
  "title": "Components/InputMask/Card Number",
  "kind": "Components/InputMask/Card Number",
  "id": "components-inputmask-card-number--card-number",
  "name": "Card Number",
  "story": "Card Number",
  "component": {
    "displayName": "InputMask",
    "utils": {},
    "__docgenInfo": {
      "description": "",
      "displayName": "InputMask",
      "props": {
        "name": {
          "defaultValue": null,
          "description": "Name of the `Input`",
          "name": "name",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "type": {
          "defaultValue": null,
          "description": "Type of text inside `Input`",
          "name": "type",
          "required": false,
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "\"number\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"tel\""
              },
              {
                "value": "\"url\""
              },
              {
                "value": "\"email\""
              },
              {
                "value": "\"password\""
              }
            ]
          }
        },
        "value": {
          "defaultValue": null,
          "description": "Value of the `Input` (Used in case of controlled `Input`)",
          "name": "value",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "defaultValue": {
          "defaultValue": null,
          "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
          "name": "defaultValue",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "placeholder": {
          "defaultValue": null,
          "description": "Text to display when input is empty.\nIncase a label is missing, a placeholder should be provided to make it accessible for all user.",
          "name": "placeholder",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "size": {
          "defaultValue": null,
          "description": "Size of the `Input`",
          "name": "size",
          "required": false,
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "\"regular\""
              },
              {
                "value": "\"tiny\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "Material icon name",
          "name": "icon",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "inlineLabel": {
          "defaultValue": null,
          "description": "Label to be displayed inside `Input`",
          "name": "inlineLabel",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "disabled": {
          "defaultValue": null,
          "description": "Disables the `Input`, making it unable to type",
          "name": "disabled",
          "required": false,
          "type": {
            "name": "boolean | undefined"
          }
        },
        "required": {
          "defaultValue": null,
          "description": "Shows the user that this field id required",
          "name": "required",
          "required": false,
          "type": {
            "name": "boolean | undefined"
          }
        },
        "autoFocus": {
          "defaultValue": null,
          "description": "Adds autoFocus",
          "name": "autoFocus",
          "required": false,
          "type": {
            "name": "boolean | undefined"
          }
        },
        "autoComplete": {
          "defaultValue": null,
          "description": "Specifies whether `input field should have autocomplete enabled",
          "name": "autoComplete",
          "required": false,
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "\"on\""
              },
              {
                "value": "\"off\""
              }
            ]
          }
        },
        "readOnly": {
          "defaultValue": null,
          "description": "Disables the `Input`, making it unable to type",
          "name": "readOnly",
          "required": false,
          "type": {
            "name": "boolean | undefined"
          }
        },
        "min": {
          "defaultValue": null,
          "description": "Valid for number it defines the most negative value in the range of permitted values.",
          "name": "min",
          "required": false,
          "type": {
            "name": "number | undefined"
          }
        },
        "max": {
          "defaultValue": null,
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "name": "max",
          "required": false,
          "type": {
            "name": "number | undefined"
          }
        },
        "minLength": {
          "defaultValue": null,
          "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
          "name": "minLength",
          "required": false,
          "type": {
            "name": "number | undefined"
          }
        },
        "maxLength": {
          "defaultValue": null,
          "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
          "name": "maxLength",
          "required": false,
          "type": {
            "name": "number | undefined"
          }
        },
        "pattern": {
          "defaultValue": null,
          "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
          "name": "pattern",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "error": {
          "defaultValue": null,
          "description": "Shows error state in case of failed validation",
          "name": "error",
          "required": false,
          "type": {
            "name": "boolean | undefined"
          }
        },
        "info": {
          "defaultValue": null,
          "description": "Text to be rendered in info `Popover`",
          "name": "info",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "minWidth": {
          "defaultValue": null,
          "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
          "name": "minWidth",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "onClear": {
          "defaultValue": null,
          "description": "Callback function when user clicks the clear button",
          "name": "onClear",
          "required": false,
          "type": {
            "name": "(((e: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "Callback function when `Input` text changes\n<br/>**Second argument will be the masked value**",
          "name": "onChange",
          "required": false,
          "type": {
            "name": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          }
        },
        "onClick": {
          "defaultValue": null,
          "description": "Handler to be called when `Input` is clicked",
          "name": "onClick",
          "required": false,
          "type": {
            "name": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          }
        },
        "onBlur": {
          "defaultValue": null,
          "description": "Handler to be called when `Input` loses focus\n<br/>**Second argument will be the masked value**",
          "name": "onBlur",
          "required": false,
          "type": {
            "name": "(((e: FocusEvent<HTMLInputElement, Element>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          }
        },
        "onFocus": {
          "defaultValue": null,
          "description": "Handler to be called when `Input` gets focus",
          "name": "onFocus",
          "required": false,
          "type": {
            "name": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
          }
        },
        "actionIcon": {
          "defaultValue": null,
          "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
          "name": "actionIcon",
          "required": false,
          "type": {
            "name": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          }
        },
        "className": {
          "defaultValue": null,
          "description": "Adds custom class",
          "name": "className",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "data-test": {
          "defaultValue": null,
          "description": "Stores custom testing data private to the component.",
          "name": "data-test",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "mask": {
          "defaultValue": null,
          "description": "Every value of Array represent either fixed char or regular expression for particular index\n\n<pre className=\"DocPage-codeBlock\">\nMask: (string | RegExp)[]\n</pre>",
          "name": "mask",
          "required": true,
          "type": {
            "name": "Mask"
          }
        },
        "placeholderChar": {
          "defaultValue": null,
          "description": "Character to be used for empty value at particular index in `Mask`",
          "name": "placeholderChar",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "caption": {
          "defaultValue": null,
          "description": "Adds caption to `input` on error",
          "name": "caption",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "validators": {
          "defaultValue": null,
          "description": "custom Validator for `InputMask`\n\n`ValidatorFn: (val: string) => boolean`",
          "name": "validators",
          "required": false,
          "type": {
            "name": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
          }
        },
        "clearOnEmptyBlur": {
          "defaultValue": null,
          "description": "Clear the `Input` on blur if value === defaultPlaceholderValue",
          "name": "clearOnEmptyBlur",
          "required": false,
          "type": {
            "name": "boolean | undefined"
          }
        },
        "helpText": {
          "defaultValue": null,
          "description": "Add text below `input`",
          "name": "helpText",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        }
      }
    }
  },
  "parameters": {
    "docs": {
      "inlineStories": true,
      "iframeHeight": 100,
      "theme": {
        "base": "light",
        "colorPrimary": "#0000001a",
        "colorSecondary": "deepskyblue",
        "appBg": "white",
        "appContentBg": "white",
        "appBorderColor": "#0000001a",
        "appBorderRadius": 4,
        "fontBase": "\"Nunito Sans\", \"Open Sans\", sans-serif",
        "fontCode": "monospace",
        "textColor": "black",
        "textInverseColor": "rgba(255,255,255,0.9)",
        "textMutedColor": "#666666",
        "barTextColor": "silver",
        "barSelectedColor": "black",
        "barBg": "white",
        "inputBg": "white",
        "inputBorder": "silver",
        "inputTextColor": "black",
        "inputBorderRadius": 4,
        "brandTitle": "Masala Design System v2.13.5",
        "brandUrl": "https://github.com/innovaccer/design-system/"
      }
    },
    "framework": "react",
    "backgrounds": {
      "grid": {
        "cellSize": 20,
        "opacity": 0.5,
        "cellAmount": 5
      },
      "values": [
        {
          "name": "light",
          "value": "#F8F8F8"
        },
        {
          "name": "dark",
          "value": "#333333"
        }
      ]
    },
    "viewMode": "docs",
    "actions": {
      "argTypesRegex": "^on[A-Z].*"
    },
    "a11y": {
      "element": "#root",
      "manual": false
    },
    "viewport": {
      "viewports": {
        "iphone5": {
          "name": "iPhone 5",
          "styles": {
            "height": "568px",
            "width": "320px"
          },
          "type": "mobile"
        },
        "iphone6": {
          "name": "iPhone 6",
          "styles": {
            "height": "667px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone6p": {
          "name": "iPhone 6 Plus",
          "styles": {
            "height": "736px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphone8p": {
          "name": "iPhone 8 Plus",
          "styles": {
            "height": "736px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonex": {
          "name": "iPhone X",
          "styles": {
            "height": "812px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphonexr": {
          "name": "iPhone XR",
          "styles": {
            "height": "896px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonexsmax": {
          "name": "iPhone XS Max",
          "styles": {
            "height": "896px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonese2": {
          "name": "iPhone SE (2nd generation)",
          "styles": {
            "height": "667px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone12mini": {
          "name": "iPhone 12 mini",
          "styles": {
            "height": "812px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone12": {
          "name": "iPhone 12",
          "styles": {
            "height": "844px",
            "width": "390px"
          },
          "type": "mobile"
        },
        "iphone12promax": {
          "name": "iPhone 12 Pro Max",
          "styles": {
            "height": "926px",
            "width": "428px"
          },
          "type": "mobile"
        },
        "ipad": {
          "name": "iPad",
          "styles": {
            "height": "1024px",
            "width": "768px"
          },
          "type": "tablet"
        },
        "ipad10p": {
          "name": "iPad Pro 10.5-in",
          "styles": {
            "height": "1112px",
            "width": "834px"
          },
          "type": "tablet"
        },
        "ipad12p": {
          "name": "iPad Pro 12.9-in",
          "styles": {
            "height": "1366px",
            "width": "1024px"
          },
          "type": "tablet"
        },
        "galaxys5": {
          "name": "Galaxy S5",
          "styles": {
            "height": "640px",
            "width": "360px"
          },
          "type": "mobile"
        },
        "galaxys9": {
          "name": "Galaxy S9",
          "styles": {
            "height": "740px",
            "width": "360px"
          },
          "type": "mobile"
        },
        "nexus5x": {
          "name": "Nexus 5X",
          "styles": {
            "height": "660px",
            "width": "412px"
          },
          "type": "mobile"
        },
        "nexus6p": {
          "name": "Nexus 6P",
          "styles": {
            "height": "732px",
            "width": "412px"
          },
          "type": "mobile"
        },
        "pixel": {
          "name": "Pixel",
          "styles": {
            "height": "960px",
            "width": "540px"
          },
          "type": "mobile"
        },
        "pixelxl": {
          "name": "Pixel XL",
          "styles": {
            "height": "1280px",
            "width": "720px"
          },
          "type": "mobile"
        }
      }
    },
    "controls": {
      "expanded": true
    },
    "options": {},
    "fileName": "./core/components/molecules/inputMask/__stories__/CardNumber.story.jsx",
    "storySource": {
      "source": "() => {\n  return (\n    <div className=\"w-25\">\n      <Label className=\"mb-3\">Card Number</Label>\n      <InputMask\n        mask={[\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          ' ',\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          ' ',\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          ' ',\n          /\\d/,\n          /\\d/,\n          /\\d/,\n          /\\d/,\n        ]}\n        placeholder=\"____ ____ ____ ____\"\n        name=\"card_number\"\n        icon=\"credit_card\"\n      />\n    </div>\n  );\n}"
    },
    "__isArgsStory": false,
    "__id": "components-inputmask-card-number--card-number",
    "globals": {
      "measureEnabled": false,
      "outline": false
    },
    "args": {},
    "argTypes": {
      "name": {
        "name": "name",
        "description": "Name of the `Input`",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "type": {
        "name": "type",
        "description": "Type of text inside `Input`",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "undefined",
            "number",
            "text",
            "tel",
            "url",
            "email",
            "password"
          ]
        },
        "table": {
          "type": {
            "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
          },
          "defaultValue": null
        }
      },
      "value": {
        "name": "value",
        "description": "Value of the `Input` (Used in case of controlled `Input`)",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "defaultValue": {
        "name": "defaultValue",
        "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "placeholder": {
        "name": "placeholder",
        "description": "Text to display when input is empty.\nIncase a label is missing, a placeholder should be provided to make it accessible for all user.",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "size": {
        "name": "size",
        "description": "Size of the `Input`",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "undefined",
            "regular",
            "tiny",
            "large"
          ]
        },
        "table": {
          "type": {
            "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
          },
          "defaultValue": null
        }
      },
      "icon": {
        "name": "icon",
        "description": "Material icon name",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "inlineLabel": {
        "name": "inlineLabel",
        "description": "Label to be displayed inside `Input`",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "disabled": {
        "name": "disabled",
        "description": "Disables the `Input`, making it unable to type",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "required": {
        "name": "required",
        "description": "Shows the user that this field id required",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "autoFocus": {
        "name": "autoFocus",
        "description": "Adds autoFocus",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "autoComplete": {
        "name": "autoComplete",
        "description": "Specifies whether `input field should have autocomplete enabled",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "undefined",
            "on",
            "off"
          ]
        },
        "table": {
          "type": {
            "summary": "undefined | \"on\" | \"off\""
          },
          "defaultValue": null
        }
      },
      "readOnly": {
        "name": "readOnly",
        "description": "Disables the `Input`, making it unable to type",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "min": {
        "name": "min",
        "description": "Valid for number it defines the most negative value in the range of permitted values.",
        "type": {
          "required": false,
          "name": "other",
          "value": "number | undefined"
        },
        "table": {
          "type": {
            "summary": "number | undefined"
          },
          "defaultValue": null
        }
      },
      "max": {
        "name": "max",
        "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
        "type": {
          "required": false,
          "name": "other",
          "value": "number | undefined"
        },
        "table": {
          "type": {
            "summary": "number | undefined"
          },
          "defaultValue": null
        }
      },
      "minLength": {
        "name": "minLength",
        "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
        "type": {
          "required": false,
          "name": "other",
          "value": "number | undefined"
        },
        "table": {
          "type": {
            "summary": "number | undefined"
          },
          "defaultValue": null
        }
      },
      "maxLength": {
        "name": "maxLength",
        "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
        "type": {
          "required": false,
          "name": "other",
          "value": "number | undefined"
        },
        "table": {
          "type": {
            "summary": "number | undefined"
          },
          "defaultValue": null
        }
      },
      "pattern": {
        "name": "pattern",
        "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "error": {
        "name": "error",
        "description": "Shows error state in case of failed validation",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "info": {
        "name": "info",
        "description": "Text to be rendered in info `Popover`",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "minWidth": {
        "name": "minWidth",
        "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "onClear": {
        "name": "onClear",
        "description": "Callback function when user clicks the clear button",
        "type": {
          "required": false,
          "name": "function",
          "value": "(((e: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
        },
        "table": {
          "type": {
            "summary": "(((e: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
          },
          "defaultValue": null
        }
      },
      "onChange": {
        "name": "onChange",
        "description": "Callback function when `Input` text changes\n<br/>**Second argument will be the masked value**",
        "type": {
          "required": false,
          "name": "function",
          "value": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
        },
        "table": {
          "type": {
            "summary": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          },
          "defaultValue": null
        }
      },
      "onClick": {
        "name": "onClick",
        "description": "Handler to be called when `Input` is clicked",
        "type": {
          "required": false,
          "name": "function",
          "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "onBlur": {
        "name": "onBlur",
        "description": "Handler to be called when `Input` loses focus\n<br/>**Second argument will be the masked value**",
        "type": {
          "required": false,
          "name": "function",
          "value": "(((e: FocusEvent<HTMLInputElement, Element>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
        },
        "table": {
          "type": {
            "summary": "(((e: FocusEvent<HTMLInputElement, Element>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
          },
          "defaultValue": null
        }
      },
      "onFocus": {
        "name": "onFocus",
        "description": "Handler to be called when `Input` gets focus",
        "type": {
          "required": false,
          "name": "function",
          "value": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "actionIcon": {
        "name": "actionIcon",
        "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
        "type": {
          "required": false,
          "name": "other",
          "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
        },
        "table": {
          "type": {
            "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
          },
          "defaultValue": null
        }
      },
      "className": {
        "name": "className",
        "description": "Adds custom class",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "data-test": {
        "name": "data-test",
        "description": "Stores custom testing data private to the component.",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "mask": {
        "name": "mask",
        "description": "Every value of Array represent either fixed char or regular expression for particular index\n\n<pre className=\"DocPage-codeBlock\">\nMask: (string | RegExp)[]\n</pre>",
        "type": {
          "required": true,
          "name": "other",
          "value": "Mask"
        },
        "table": {
          "type": {
            "summary": "Mask"
          },
          "defaultValue": null
        }
      },
      "placeholderChar": {
        "name": "placeholderChar",
        "description": "Character to be used for empty value at particular index in `Mask`",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "caption": {
        "name": "caption",
        "description": "Adds caption to `input` on error",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "validators": {
        "name": "validators",
        "description": "custom Validator for `InputMask`\n\n`ValidatorFn: (val: string) => boolean`",
        "type": {
          "required": false,
          "name": "other",
          "value": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
        },
        "table": {
          "type": {
            "summary": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
          },
          "defaultValue": null
        }
      },
      "clearOnEmptyBlur": {
        "name": "clearOnEmptyBlur",
        "description": "Clear the `Input` on blur if value === defaultPlaceholderValue",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "helpText": {
        "name": "helpText",
        "description": "Add text below `input`",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      }
    }
  },
  "initialArgs": {},
  "argTypes": {
    "name": {
      "name": "name",
      "description": "Name of the `Input`",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "type": {
      "name": "type",
      "description": "Type of text inside `Input`",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "undefined",
          "number",
          "text",
          "tel",
          "url",
          "email",
          "password"
        ]
      },
      "table": {
        "type": {
          "summary": "undefined | \"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"password\""
        },
        "defaultValue": null
      }
    },
    "value": {
      "name": "value",
      "description": "Value of the `Input` (Used in case of controlled `Input`)",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "defaultValue": {
      "name": "defaultValue",
      "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "placeholder": {
      "name": "placeholder",
      "description": "Text to display when input is empty.\nIncase a label is missing, a placeholder should be provided to make it accessible for all user.",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "size": {
      "name": "size",
      "description": "Size of the `Input`",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "undefined",
          "regular",
          "tiny",
          "large"
        ]
      },
      "table": {
        "type": {
          "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
        },
        "defaultValue": null
      }
    },
    "icon": {
      "name": "icon",
      "description": "Material icon name",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "inlineLabel": {
      "name": "inlineLabel",
      "description": "Label to be displayed inside `Input`",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "disabled": {
      "name": "disabled",
      "description": "Disables the `Input`, making it unable to type",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "required": {
      "name": "required",
      "description": "Shows the user that this field id required",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "autoFocus": {
      "name": "autoFocus",
      "description": "Adds autoFocus",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "autoComplete": {
      "name": "autoComplete",
      "description": "Specifies whether `input field should have autocomplete enabled",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "undefined",
          "on",
          "off"
        ]
      },
      "table": {
        "type": {
          "summary": "undefined | \"on\" | \"off\""
        },
        "defaultValue": null
      }
    },
    "readOnly": {
      "name": "readOnly",
      "description": "Disables the `Input`, making it unable to type",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "min": {
      "name": "min",
      "description": "Valid for number it defines the most negative value in the range of permitted values.",
      "type": {
        "required": false,
        "name": "other",
        "value": "number | undefined"
      },
      "table": {
        "type": {
          "summary": "number | undefined"
        },
        "defaultValue": null
      }
    },
    "max": {
      "name": "max",
      "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
      "type": {
        "required": false,
        "name": "other",
        "value": "number | undefined"
      },
      "table": {
        "type": {
          "summary": "number | undefined"
        },
        "defaultValue": null
      }
    },
    "minLength": {
      "name": "minLength",
      "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
      "type": {
        "required": false,
        "name": "other",
        "value": "number | undefined"
      },
      "table": {
        "type": {
          "summary": "number | undefined"
        },
        "defaultValue": null
      }
    },
    "maxLength": {
      "name": "maxLength",
      "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
      "type": {
        "required": false,
        "name": "other",
        "value": "number | undefined"
      },
      "table": {
        "type": {
          "summary": "number | undefined"
        },
        "defaultValue": null
      }
    },
    "pattern": {
      "name": "pattern",
      "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "error": {
      "name": "error",
      "description": "Shows error state in case of failed validation",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "info": {
      "name": "info",
      "description": "Text to be rendered in info `Popover`",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "minWidth": {
      "name": "minWidth",
      "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "onClear": {
      "name": "onClear",
      "description": "Callback function when user clicks the clear button",
      "type": {
        "required": false,
        "name": "function",
        "value": "(((e: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
      },
      "table": {
        "type": {
          "summary": "(((e: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
        },
        "defaultValue": null
      }
    },
    "onChange": {
      "name": "onChange",
      "description": "Callback function when `Input` text changes\n<br/>**Second argument will be the masked value**",
      "type": {
        "required": false,
        "name": "function",
        "value": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
      },
      "table": {
        "type": {
          "summary": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
        },
        "defaultValue": null
      }
    },
    "onClick": {
      "name": "onClick",
      "description": "Handler to be called when `Input` is clicked",
      "type": {
        "required": false,
        "name": "function",
        "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "onBlur": {
      "name": "onBlur",
      "description": "Handler to be called when `Input` loses focus\n<br/>**Second argument will be the masked value**",
      "type": {
        "required": false,
        "name": "function",
        "value": "(((e: FocusEvent<HTMLInputElement, Element>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
      },
      "table": {
        "type": {
          "summary": "(((e: FocusEvent<HTMLInputElement, Element>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
        },
        "defaultValue": null
      }
    },
    "onFocus": {
      "name": "onFocus",
      "description": "Handler to be called when `Input` gets focus",
      "type": {
        "required": false,
        "name": "function",
        "value": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "actionIcon": {
      "name": "actionIcon",
      "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
      "type": {
        "required": false,
        "name": "other",
        "value": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
      },
      "table": {
        "type": {
          "summary": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
        },
        "defaultValue": null
      }
    },
    "className": {
      "name": "className",
      "description": "Adds custom class",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "data-test": {
      "name": "data-test",
      "description": "Stores custom testing data private to the component.",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "mask": {
      "name": "mask",
      "description": "Every value of Array represent either fixed char or regular expression for particular index\n\n<pre className=\"DocPage-codeBlock\">\nMask: (string | RegExp)[]\n</pre>",
      "type": {
        "required": true,
        "name": "other",
        "value": "Mask"
      },
      "table": {
        "type": {
          "summary": "Mask"
        },
        "defaultValue": null
      }
    },
    "placeholderChar": {
      "name": "placeholderChar",
      "description": "Character to be used for empty value at particular index in `Mask`",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "caption": {
      "name": "caption",
      "description": "Adds caption to `input` on error",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "validators": {
      "name": "validators",
      "description": "custom Validator for `InputMask`\n\n`ValidatorFn: (val: string) => boolean`",
      "type": {
        "required": false,
        "name": "other",
        "value": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
      },
      "table": {
        "type": {
          "summary": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
        },
        "defaultValue": null
      }
    },
    "clearOnEmptyBlur": {
      "name": "clearOnEmptyBlur",
      "description": "Clear the `Input` on blur if value === defaultPlaceholderValue",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "helpText": {
      "name": "helpText",
      "description": "Add text below `input`",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    }
  }
}