{
  "args": {},
  "componentId": "components-switch-all",
  "title": "Components/Switch/All",
  "kind": "Components/Switch/All",
  "id": "components-switch-all--all",
  "name": "All",
  "story": "All",
  "component": {
    "displayName": "Switch",
    "__docgenInfo": {
      "description": "######Switch has two types:\n  - [Controlled Switch](https://reactjs.org/docs/forms.html#controlled-components)\n  - [Uncontrolled Switch](https://reactjs.org/docs/uncontrolled-components.html)",
      "displayName": "Switch",
      "props": {
        "size": {
          "defaultValue": null,
          "description": "Size of `Switch`",
          "name": "size",
          "required": false,
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "\"regular\""
              },
              {
                "value": "\"tiny\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "appearance": {
          "defaultValue": null,
          "description": "Color of `Switch`\n\n**Soon to be deprecated**",
          "name": "appearance",
          "required": false,
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "\"primary\""
              },
              {
                "value": "\"alert\""
              },
              {
                "value": "\"warning\""
              },
              {
                "value": "\"success\""
              }
            ]
          }
        },
        "defaultChecked": {
          "defaultValue": null,
          "description": "Default value of checked (Used in case of uncontrolled `Switch`)",
          "name": "defaultChecked",
          "required": false,
          "type": {
            "name": "boolean | undefined"
          }
        },
        "checked": {
          "defaultValue": null,
          "description": "Denotes Selection (Used in case of controlled `Switch`)",
          "name": "checked",
          "required": false,
          "type": {
            "name": "boolean | undefined"
          }
        },
        "disabled": {
          "defaultValue": null,
          "description": "Disables the `Switch`, making it unable to be pressed",
          "name": "disabled",
          "required": false,
          "type": {
            "name": "boolean | undefined"
          }
        },
        "name": {
          "defaultValue": null,
          "description": "Name of `Switch`",
          "name": "name",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "value": {
          "defaultValue": null,
          "description": "Value of `Switch`",
          "name": "value",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "Callback function called when `Switch` is toggled",
          "name": "onChange",
          "required": false,
          "type": {
            "name": "((event: ChangeEvent | KeyboardEvent, selected: boolean) => void) | undefined"
          }
        },
        "className": {
          "defaultValue": null,
          "description": "Adds custom class",
          "name": "className",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        },
        "data-test": {
          "defaultValue": null,
          "description": "Stores custom testing data private to the component.",
          "name": "data-test",
          "required": false,
          "type": {
            "name": "string | undefined"
          }
        }
      }
    }
  },
  "parameters": {
    "docs": {
      "inlineStories": true,
      "iframeHeight": 100,
      "theme": {
        "base": "light",
        "colorPrimary": "#0000001a",
        "colorSecondary": "deepskyblue",
        "appBg": "white",
        "appContentBg": "white",
        "appBorderColor": "#0000001a",
        "appBorderRadius": 4,
        "fontBase": "\"Nunito Sans\", \"Open Sans\", sans-serif",
        "fontCode": "monospace",
        "textColor": "black",
        "textInverseColor": "rgba(255,255,255,0.9)",
        "textMutedColor": "#666666",
        "barTextColor": "silver",
        "barSelectedColor": "black",
        "barBg": "white",
        "inputBg": "white",
        "inputBorder": "silver",
        "inputTextColor": "black",
        "inputBorderRadius": 4,
        "brandTitle": "Masala Design System v2.13.5",
        "brandUrl": "https://github.com/innovaccer/design-system/"
      },
      "docPage": {
        "a11yProps": " \n        **htmlFor:** \n        <br/> \n        -Add `htmlFor='vaccination-status'` to label to programmatically associated it with switch \n        which has `id='vaccination-status'`. \n        <br/> \n        -This means that,a screen reader will read out the label when the user is focused on the switch, \n        making it easier for an assistive technology user to understand \n        what data should be entered.\n        <br/> \n        -When a user clicks or touches/taps a label, the browser passes the focus to its associated switch. That increased hit \n        area for focusing the input provides an advantage to anyone trying to activate it.\n         "
      }
    },
    "framework": "react",
    "backgrounds": {
      "grid": {
        "cellSize": 20,
        "opacity": 0.5,
        "cellAmount": 5
      },
      "values": [
        {
          "name": "light",
          "value": "#F8F8F8"
        },
        {
          "name": "dark",
          "value": "#333333"
        }
      ]
    },
    "viewMode": "docs",
    "actions": {
      "argTypesRegex": "^on[A-Z].*"
    },
    "a11y": {
      "element": "#root",
      "manual": false
    },
    "viewport": {
      "viewports": {
        "iphone5": {
          "name": "iPhone 5",
          "styles": {
            "height": "568px",
            "width": "320px"
          },
          "type": "mobile"
        },
        "iphone6": {
          "name": "iPhone 6",
          "styles": {
            "height": "667px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone6p": {
          "name": "iPhone 6 Plus",
          "styles": {
            "height": "736px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphone8p": {
          "name": "iPhone 8 Plus",
          "styles": {
            "height": "736px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonex": {
          "name": "iPhone X",
          "styles": {
            "height": "812px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphonexr": {
          "name": "iPhone XR",
          "styles": {
            "height": "896px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonexsmax": {
          "name": "iPhone XS Max",
          "styles": {
            "height": "896px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonese2": {
          "name": "iPhone SE (2nd generation)",
          "styles": {
            "height": "667px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone12mini": {
          "name": "iPhone 12 mini",
          "styles": {
            "height": "812px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone12": {
          "name": "iPhone 12",
          "styles": {
            "height": "844px",
            "width": "390px"
          },
          "type": "mobile"
        },
        "iphone12promax": {
          "name": "iPhone 12 Pro Max",
          "styles": {
            "height": "926px",
            "width": "428px"
          },
          "type": "mobile"
        },
        "ipad": {
          "name": "iPad",
          "styles": {
            "height": "1024px",
            "width": "768px"
          },
          "type": "tablet"
        },
        "ipad10p": {
          "name": "iPad Pro 10.5-in",
          "styles": {
            "height": "1112px",
            "width": "834px"
          },
          "type": "tablet"
        },
        "ipad12p": {
          "name": "iPad Pro 12.9-in",
          "styles": {
            "height": "1366px",
            "width": "1024px"
          },
          "type": "tablet"
        },
        "galaxys5": {
          "name": "Galaxy S5",
          "styles": {
            "height": "640px",
            "width": "360px"
          },
          "type": "mobile"
        },
        "galaxys9": {
          "name": "Galaxy S9",
          "styles": {
            "height": "740px",
            "width": "360px"
          },
          "type": "mobile"
        },
        "nexus5x": {
          "name": "Nexus 5X",
          "styles": {
            "height": "660px",
            "width": "412px"
          },
          "type": "mobile"
        },
        "nexus6p": {
          "name": "Nexus 6P",
          "styles": {
            "height": "732px",
            "width": "412px"
          },
          "type": "mobile"
        },
        "pixel": {
          "name": "Pixel",
          "styles": {
            "height": "960px",
            "width": "540px"
          },
          "type": "mobile"
        },
        "pixelxl": {
          "name": "Pixel XL",
          "styles": {
            "height": "1280px",
            "width": "720px"
          },
          "type": "mobile"
        }
      }
    },
    "controls": {
      "expanded": true
    },
    "options": {},
    "fileName": "./core/components/atoms/switchInput/__stories__/index.story.jsx",
    "storySource": {
      "source": "() => {\n  const size = 'tiny';\n\n  const [checked, setChecked] = React.useState(false);\n\n  const disabled = false;\n\n  const onChangeHandler = (_event, checkedValue) => {\n    setChecked(!checked);\n    return action(`switch-change: ${checkedValue}`)();\n  };\n\n  return (\n    <form>\n      <Label htmlFor=\"vaccination-status\">Have you been vaccinated ?</Label>\n      <div>\n        <Switch id=\"vaccination-status\" disabled={disabled} checked={checked} size={size} onChange={onChangeHandler} />\n      </div>\n    </form>\n  );\n}"
    },
    "__isArgsStory": false,
    "__id": "components-switch-all--all",
    "globals": {
      "measureEnabled": false,
      "outline": false
    },
    "args": {},
    "argTypes": {
      "size": {
        "name": "size",
        "description": "Size of `Switch`",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "undefined",
            "regular",
            "tiny",
            "large"
          ]
        },
        "table": {
          "type": {
            "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
          },
          "defaultValue": null
        }
      },
      "appearance": {
        "name": "appearance",
        "description": "Color of `Switch`\n\n**Soon to be deprecated**",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "undefined",
            "primary",
            "alert",
            "warning",
            "success"
          ]
        },
        "table": {
          "type": {
            "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\""
          },
          "defaultValue": null
        }
      },
      "defaultChecked": {
        "name": "defaultChecked",
        "description": "Default value of checked (Used in case of uncontrolled `Switch`)",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "checked": {
        "name": "checked",
        "description": "Denotes Selection (Used in case of controlled `Switch`)",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "disabled": {
        "name": "disabled",
        "description": "Disables the `Switch`, making it unable to be pressed",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "name": {
        "name": "name",
        "description": "Name of `Switch`",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "value": {
        "name": "value",
        "description": "Value of `Switch`",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "onChange": {
        "name": "onChange",
        "description": "Callback function called when `Switch` is toggled",
        "type": {
          "required": false,
          "name": "function",
          "value": "((event: ChangeEvent | KeyboardEvent, selected: boolean) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((event: ChangeEvent | KeyboardEvent, selected: boolean) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "className": {
        "name": "className",
        "description": "Adds custom class",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "data-test": {
        "name": "data-test",
        "description": "Stores custom testing data private to the component.",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      }
    }
  },
  "initialArgs": {},
  "argTypes": {
    "size": {
      "name": "size",
      "description": "Size of `Switch`",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "undefined",
          "regular",
          "tiny",
          "large"
        ]
      },
      "table": {
        "type": {
          "summary": "undefined | \"regular\" | \"tiny\" | \"large\""
        },
        "defaultValue": null
      }
    },
    "appearance": {
      "name": "appearance",
      "description": "Color of `Switch`\n\n**Soon to be deprecated**",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "undefined",
          "primary",
          "alert",
          "warning",
          "success"
        ]
      },
      "table": {
        "type": {
          "summary": "undefined | \"primary\" | \"alert\" | \"warning\" | \"success\""
        },
        "defaultValue": null
      }
    },
    "defaultChecked": {
      "name": "defaultChecked",
      "description": "Default value of checked (Used in case of uncontrolled `Switch`)",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "checked": {
      "name": "checked",
      "description": "Denotes Selection (Used in case of controlled `Switch`)",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "disabled": {
      "name": "disabled",
      "description": "Disables the `Switch`, making it unable to be pressed",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "name": {
      "name": "name",
      "description": "Name of `Switch`",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "value": {
      "name": "value",
      "description": "Value of `Switch`",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "onChange": {
      "name": "onChange",
      "description": "Callback function called when `Switch` is toggled",
      "type": {
        "required": false,
        "name": "function",
        "value": "((event: ChangeEvent | KeyboardEvent, selected: boolean) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((event: ChangeEvent | KeyboardEvent, selected: boolean) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "className": {
      "name": "className",
      "description": "Adds custom class",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "data-test": {
      "name": "data-test",
      "description": "Stores custom testing data private to the component.",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    }
  }
}